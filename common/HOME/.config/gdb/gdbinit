# -*- mode: gdb-script; -*-
set auto-load safe-path /
set print pretty on
set print array on
set print array-indexes on
set print object on
set print vtbl on

set history save on
set history size unlimited

set $64BITS = 1

define peda
  source /usr/share/peda/peda.py
end
document peda
Enable Python Exploit Development Assistance for GDB.
Usage: peda
end

define xxd
dump binary memory dump.bin $arg0 $arg0+$arg1
shell xxd dump.bin
end
document xxd
Call xxd on a region of memory.
Usage: xxd START LENGTH
end

define hexdump
dump binary memory dump.bin $arg0 $arg0+$arg1
shell hexdump -C dump.bin
end
document hexdump
Call hexdump -C on a region of memory.
Usage: hexdump START LENGTH
end

define ascii_char
    if $argc != 1
        help ascii_char
    else
        # thanks elaine :)
        set $_c = *(unsigned char *)($arg0)
        if ($_c < 0x20 || $_c > 0x7E)
            printf "."
        else
            printf "%c", $_c
        end
    end
end
document ascii_char
Print ASCII value of byte at address ADDR.
Print "." if the value is unprintable.
Usage: ascii_char ADDR
end

define hex_quad
    if $argc != 1
        help hex_quad
    else
        printf "%02X %02X %02X %02X %02X %02X %02X %02X", \
               *(unsigned char*)($arg0), *(unsigned char*)($arg0 + 1),     \
               *(unsigned char*)($arg0 + 2), *(unsigned char*)($arg0 + 3), \
               *(unsigned char*)($arg0 + 4), *(unsigned char*)($arg0 + 5), \
               *(unsigned char*)($arg0 + 6), *(unsigned char*)($arg0 + 7)
    end
end
document hex_quad
Print eight hexadecimal bytes starting at address ADDR.
Usage: hex_quad ADDR
end

define hexline
    if $argc != 1
        help hexline
    else
        echo \033[1m
        if ($64BITS == 1)
         printf "0x%016lX : ", $arg0
        else
         printf "0x%08X : ", $arg0
        end
        echo \033[0m
        hex_quad $arg0
        echo \033[1m
        printf " - "
        echo \033[0m
        hex_quad $arg0+8
        printf " "
        echo \033[1m
        ascii_char $arg0+0x0
        ascii_char $arg0+0x1
        ascii_char $arg0+0x2
        ascii_char $arg0+0x3
        ascii_char $arg0+0x4
        ascii_char $arg0+0x5
        ascii_char $arg0+0x6
        ascii_char $arg0+0x7
        ascii_char $arg0+0x8
        ascii_char $arg0+0x9
        ascii_char $arg0+0xA
        ascii_char $arg0+0xB
        ascii_char $arg0+0xC
        ascii_char $arg0+0xD
        ascii_char $arg0+0xE
        ascii_char $arg0+0xF
        echo \033[0m
        printf "\n"
    end
end
document hexline
Display a 16-byte hex/ASCII dump of memory at address ADDR.
Usage: hexline ADDR
end

define dd
  if $argc < 1 || $argc > 2
    help dd
  else
    if $argc == 1
      set $_max = 8
    else
      set $_max = $arg1
    end
    echo \033[0m
    set $_count = 0
    while ($_count < $_max)
      set $_i = ($_count * 0x10)
      hexline $arg0+$_i
      set $_count++
    end
  end
end
document dd
Display NUM lines of hexline for ADDRESS.
Usage: ddump ADDRESS NUM
end
